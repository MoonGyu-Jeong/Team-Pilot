/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v201907221223.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1/commonapi/CANSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace commonapi {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createCANSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< CANSomeIPProxy>(_address, _connection);
}

void initializeCANSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:commonapi.CAN:v1_0:can",
        0x1234, 0x5678, 1, 0);
     CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
         CAN::getInterface(),
         &createCANSomeIPProxy);
}

INITIALIZER(registerCANSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeCANSomeIPProxy);
}

CANSomeIPProxy::CANSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection )
,          hum_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x8235), CommonAPI::SomeIP::event_id_t(0x80f2), CommonAPI::SomeIP::method_id_t(0xbb8), false, false, CommonAPI::SomeIP::method_id_t(0xbb9), false, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)),
          tmp_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x8235), CommonAPI::SomeIP::event_id_t(0x80f3), CommonAPI::SomeIP::method_id_t(0xbba), false, false, CommonAPI::SomeIP::method_id_t(0xbbb), false, static_cast< CommonAPI::SomeIP::IntegerDeployment<int8_t>* >(nullptr)),
          rpm_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x8235), CommonAPI::SomeIP::event_id_t(0x80f4), CommonAPI::SomeIP::method_id_t(0xbbc), false, false, CommonAPI::SomeIP::method_id_t(0xbbd), false, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr)),
          spd_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x8235), CommonAPI::SomeIP::event_id_t(0x80f5), CommonAPI::SomeIP::method_id_t(0xbbe), false, false, CommonAPI::SomeIP::method_id_t(0xbbf), false, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr)),
          bat_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x8235), CommonAPI::SomeIP::event_id_t(0x80f6), CommonAPI::SomeIP::method_id_t(0xbc0), false, false, CommonAPI::SomeIP::method_id_t(0xbc1), false, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr))
    {
    }

    CANSomeIPProxy::HumAttribute& CANSomeIPProxy::getHumAttribute() {
        return hum_;
    }
    CANSomeIPProxy::TmpAttribute& CANSomeIPProxy::getTmpAttribute() {
        return tmp_;
    }
    CANSomeIPProxy::RpmAttribute& CANSomeIPProxy::getRpmAttribute() {
        return rpm_;
    }
    CANSomeIPProxy::SpdAttribute& CANSomeIPProxy::getSpdAttribute() {
        return spd_;
    }
    CANSomeIPProxy::BatAttribute& CANSomeIPProxy::getBatAttribute() {
        return bat_;
    }





    void CANSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
    }

} // namespace commonapi
} // namespace v1
