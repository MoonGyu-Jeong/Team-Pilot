/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_SEAME_STUB_DEFAULT_HPP_
#define V1_COMMONAPI_SEAME_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/commonapi/SEAMEStub.hpp>
#include <cassert>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace commonapi {

/**
 * Provides a default implementation for SEAMEStubRemoteEvent and
 * SEAMEStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT SEAMEStubDefault
    : public virtual SEAMEStub {
public:
    COMMONAPI_EXPORT SEAMEStubDefault()
        : remoteEventHandler_(this),
          interfaceVersion_(SEAME::getInterfaceVersion()) {
    }

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return interfaceVersion_;
    }

    COMMONAPI_EXPORT SEAMEStubRemoteEvent* initStubAdapter(const std::shared_ptr< SEAMEStubAdapter> &_adapter) {
        CommonAPI::Stub<SEAMEStubAdapter, SEAMEStubRemoteEvent>::stubAdapter_ = _adapter;
        return &remoteEventHandler_;
    }

    COMMONAPI_EXPORT virtual const uint8_t &getHumAttribute() {
        return humAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const uint8_t &getHumAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getHumAttribute();
    }
    COMMONAPI_EXPORT virtual void setHumAttribute(uint8_t _value) {
        const bool valueChanged = trySetHumAttribute(std::move(_value));
        if (valueChanged) {
            fireHumAttributeChanged(humAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setHumAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
        (void)_client;
        setHumAttribute(_value);
    }
    COMMONAPI_EXPORT virtual const int8_t &getTmpAttribute() {
        return tmpAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const int8_t &getTmpAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getTmpAttribute();
    }
    COMMONAPI_EXPORT virtual void setTmpAttribute(int8_t _value) {
        const bool valueChanged = trySetTmpAttribute(std::move(_value));
        if (valueChanged) {
            fireTmpAttributeChanged(tmpAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setTmpAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int8_t _value) {
        (void)_client;
        setTmpAttribute(_value);
    }
    COMMONAPI_EXPORT virtual const uint16_t &getRpmAttribute() {
        return rpmAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const uint16_t &getRpmAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getRpmAttribute();
    }
    COMMONAPI_EXPORT virtual void setRpmAttribute(uint16_t _value) {
        const bool valueChanged = trySetRpmAttribute(std::move(_value));
        if (valueChanged) {
            fireRpmAttributeChanged(rpmAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setRpmAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value) {
        (void)_client;
        setRpmAttribute(_value);
    }
    COMMONAPI_EXPORT virtual const uint8_t &getSpdAttribute() {
        return spdAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const uint8_t &getSpdAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getSpdAttribute();
    }
    COMMONAPI_EXPORT virtual void setSpdAttribute(uint8_t _value) {
        const bool valueChanged = trySetSpdAttribute(std::move(_value));
        if (valueChanged) {
            fireSpdAttributeChanged(spdAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setSpdAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
        (void)_client;
        setSpdAttribute(_value);
    }
    COMMONAPI_EXPORT virtual const uint8_t &getBatAttribute() {
        return batAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const uint8_t &getBatAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getBatAttribute();
    }
    COMMONAPI_EXPORT virtual void setBatAttribute(uint8_t _value) {
        const bool valueChanged = trySetBatAttribute(std::move(_value));
        if (valueChanged) {
            fireBatAttributeChanged(batAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setBatAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
        (void)_client;
        setBatAttribute(_value);
    }
    COMMONAPI_EXPORT virtual const uint8_t &getUltrasonicAttribute() {
        return ultrasonicAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const uint8_t &getUltrasonicAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getUltrasonicAttribute();
    }
    COMMONAPI_EXPORT virtual void setUltrasonicAttribute(uint8_t _value) {
        const bool valueChanged = trySetUltrasonicAttribute(std::move(_value));
        if (valueChanged) {
            fireUltrasonicAttributeChanged(ultrasonicAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setUltrasonicAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
        (void)_client;
        setUltrasonicAttribute(_value);
    }


protected:
    COMMONAPI_EXPORT virtual bool trySetHumAttribute(uint8_t _value) {
        if (!validateHumAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<SEAMEStubAdapter> stubAdapter = CommonAPI::Stub<SEAMEStubAdapter, SEAMEStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockHumAttribute(true);
            valueChanged = (humAttributeValue_ != _value);
            humAttributeValue_ = std::move(_value);
            stubAdapter->lockHumAttribute(false);
        } else {
            valueChanged = (humAttributeValue_ != _value);
            humAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateHumAttributeRequestedValue(const uint8_t &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteHumAttributeChanged() {
        // No operation in default
    }
    COMMONAPI_EXPORT virtual bool trySetTmpAttribute(int8_t _value) {
        if (!validateTmpAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<SEAMEStubAdapter> stubAdapter = CommonAPI::Stub<SEAMEStubAdapter, SEAMEStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockTmpAttribute(true);
            valueChanged = (tmpAttributeValue_ != _value);
            tmpAttributeValue_ = std::move(_value);
            stubAdapter->lockTmpAttribute(false);
        } else {
            valueChanged = (tmpAttributeValue_ != _value);
            tmpAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateTmpAttributeRequestedValue(const int8_t &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteTmpAttributeChanged() {
        // No operation in default
    }
    COMMONAPI_EXPORT virtual bool trySetRpmAttribute(uint16_t _value) {
        if (!validateRpmAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<SEAMEStubAdapter> stubAdapter = CommonAPI::Stub<SEAMEStubAdapter, SEAMEStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockRpmAttribute(true);
            valueChanged = (rpmAttributeValue_ != _value);
            rpmAttributeValue_ = std::move(_value);
            stubAdapter->lockRpmAttribute(false);
        } else {
            valueChanged = (rpmAttributeValue_ != _value);
            rpmAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateRpmAttributeRequestedValue(const uint16_t &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteRpmAttributeChanged() {
        // No operation in default
    }
    COMMONAPI_EXPORT virtual bool trySetSpdAttribute(uint8_t _value) {
        if (!validateSpdAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<SEAMEStubAdapter> stubAdapter = CommonAPI::Stub<SEAMEStubAdapter, SEAMEStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockSpdAttribute(true);
            valueChanged = (spdAttributeValue_ != _value);
            spdAttributeValue_ = std::move(_value);
            stubAdapter->lockSpdAttribute(false);
        } else {
            valueChanged = (spdAttributeValue_ != _value);
            spdAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateSpdAttributeRequestedValue(const uint8_t &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteSpdAttributeChanged() {
        // No operation in default
    }
    COMMONAPI_EXPORT virtual bool trySetBatAttribute(uint8_t _value) {
        if (!validateBatAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<SEAMEStubAdapter> stubAdapter = CommonAPI::Stub<SEAMEStubAdapter, SEAMEStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockBatAttribute(true);
            valueChanged = (batAttributeValue_ != _value);
            batAttributeValue_ = std::move(_value);
            stubAdapter->lockBatAttribute(false);
        } else {
            valueChanged = (batAttributeValue_ != _value);
            batAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateBatAttributeRequestedValue(const uint8_t &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteBatAttributeChanged() {
        // No operation in default
    }
    COMMONAPI_EXPORT virtual bool trySetUltrasonicAttribute(uint8_t _value) {
        if (!validateUltrasonicAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<SEAMEStubAdapter> stubAdapter = CommonAPI::Stub<SEAMEStubAdapter, SEAMEStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockUltrasonicAttribute(true);
            valueChanged = (ultrasonicAttributeValue_ != _value);
            ultrasonicAttributeValue_ = std::move(_value);
            stubAdapter->lockUltrasonicAttribute(false);
        } else {
            valueChanged = (ultrasonicAttributeValue_ != _value);
            ultrasonicAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateUltrasonicAttributeRequestedValue(const uint8_t &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteUltrasonicAttributeChanged() {
        // No operation in default
    }
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual SEAMEStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(SEAMEStubDefault *_defaultStub)
            : 
              defaultStub_(_defaultStub) {
        }

        COMMONAPI_EXPORT virtual void onRemoteHumAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteHumAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetHumAttribute(uint8_t _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetHumAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetHumAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
            (void)_client;
            return onRemoteSetHumAttribute(_value);
        }
        COMMONAPI_EXPORT virtual void onRemoteTmpAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteTmpAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetTmpAttribute(int8_t _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetTmpAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetTmpAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, int8_t _value) {
            (void)_client;
            return onRemoteSetTmpAttribute(_value);
        }
        COMMONAPI_EXPORT virtual void onRemoteRpmAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteRpmAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetRpmAttribute(uint16_t _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetRpmAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetRpmAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _value) {
            (void)_client;
            return onRemoteSetRpmAttribute(_value);
        }
        COMMONAPI_EXPORT virtual void onRemoteSpdAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteSpdAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetSpdAttribute(uint8_t _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetSpdAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetSpdAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
            (void)_client;
            return onRemoteSetSpdAttribute(_value);
        }
        COMMONAPI_EXPORT virtual void onRemoteBatAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteBatAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetBatAttribute(uint8_t _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetBatAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetBatAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
            (void)_client;
            return onRemoteSetBatAttribute(_value);
        }
        COMMONAPI_EXPORT virtual void onRemoteUltrasonicAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteUltrasonicAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetUltrasonicAttribute(uint8_t _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetUltrasonicAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetUltrasonicAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _value) {
            (void)_client;
            return onRemoteSetUltrasonicAttribute(_value);
        }

    private:
        SEAMEStubDefault *defaultStub_;
    };
protected:
    SEAMEStubDefault::RemoteEventHandler remoteEventHandler_;

private:

    uint8_t humAttributeValue_ {};
    int8_t tmpAttributeValue_ {};
    uint16_t rpmAttributeValue_ {};
    uint8_t spdAttributeValue_ {};
    uint8_t batAttributeValue_ {};
    uint8_t ultrasonicAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace commonapi
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_SEAME_STUB_DEFAULT
