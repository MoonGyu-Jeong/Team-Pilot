/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v201907221223.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_SEAME_SOMEIP_STUB_ADAPTER_HPP_
#define V1_COMMONAPI_SEAME_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/commonapi/SEAMEStub.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace commonapi {

template <typename _Stub = ::v1::commonapi::SEAMEStub, typename... _Stubs>
class SEAMESomeIPStubAdapterInternal
    : public virtual SEAMEStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> SEAMESomeIPStubAdapterHelper;

    ~SEAMESomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        SEAMESomeIPStubAdapterHelper::deinit();
    }

    void fireHumAttributeChanged(const uint8_t& value);

    void fireTmpAttributeChanged(const int8_t& value);

    void fireRpmAttributeChanged(const uint16_t& value);

    void fireSpdAttributeChanged(const uint8_t& value);

    void fireBatAttributeChanged(const uint8_t& value);

    void fireDisAttributeChanged(const uint8_t& value);

    void deactivateManagedInstances() {
    }

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::commonapi::SEAMEStub,
        CommonAPI::Version
    > getSEAMEInterfaceVersionStubDispatcher;

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::commonapi::SEAMEStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > getHumAttributeStubDispatcher;
    static CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::commonapi::SEAMEStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > setHumAttributeStubDispatcher;
    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::commonapi::SEAMEStub,
        int8_t,
        CommonAPI::SomeIP::IntegerDeployment<int8_t>
    > getTmpAttributeStubDispatcher;
    static CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::commonapi::SEAMEStub,
        int8_t,
        CommonAPI::SomeIP::IntegerDeployment<int8_t>
    > setTmpAttributeStubDispatcher;
    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::commonapi::SEAMEStub,
        uint16_t,
        CommonAPI::SomeIP::IntegerDeployment<uint16_t>
    > getRpmAttributeStubDispatcher;
    static CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::commonapi::SEAMEStub,
        uint16_t,
        CommonAPI::SomeIP::IntegerDeployment<uint16_t>
    > setRpmAttributeStubDispatcher;
    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::commonapi::SEAMEStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > getSpdAttributeStubDispatcher;
    static CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::commonapi::SEAMEStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > setSpdAttributeStubDispatcher;
    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::commonapi::SEAMEStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > getBatAttributeStubDispatcher;
    static CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::commonapi::SEAMEStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > setBatAttributeStubDispatcher;
    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::commonapi::SEAMEStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > getDisAttributeStubDispatcher;
    static CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::commonapi::SEAMEStub,
        uint8_t,
        CommonAPI::SomeIP::IntegerDeployment<uint8_t>
    > setDisAttributeStubDispatcher;


    SEAMESomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        SEAMESomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< SEAMEStub>(_stub))
    {

                SEAMESomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xbb8) }, &getHumAttributeStubDispatcher );
                SEAMESomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xbb9) }, &setHumAttributeStubDispatcher );
                SEAMESomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xbba) }, &getTmpAttributeStubDispatcher );
                SEAMESomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xbbb) }, &setTmpAttributeStubDispatcher );
                SEAMESomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xbbc) }, &getRpmAttributeStubDispatcher );
                SEAMESomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xbbd) }, &setRpmAttributeStubDispatcher );
                SEAMESomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xbbe) }, &getSpdAttributeStubDispatcher );
                SEAMESomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xbbf) }, &setSpdAttributeStubDispatcher );
                SEAMESomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xbc0) }, &getBatAttributeStubDispatcher );
                SEAMESomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xbc1) }, &setBatAttributeStubDispatcher );
                SEAMESomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xbc2) }, &getDisAttributeStubDispatcher );
                SEAMESomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xbc3) }, &setDisAttributeStubDispatcher );
        
        std::shared_ptr<CommonAPI::SomeIP::ClientId> clientId = std::make_shared<CommonAPI::SomeIP::ClientId>(0xFFFF);

        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x0)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x80f2), itsEventGroups, true);
            fireHumAttributeChanged(std::dynamic_pointer_cast< ::v1::commonapi::SEAMEStub>(_stub)->getHumAttribute(clientId));
        }

        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x80f3), itsEventGroups, true);
            fireTmpAttributeChanged(std::dynamic_pointer_cast< ::v1::commonapi::SEAMEStub>(_stub)->getTmpAttribute(clientId));
        }

        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x2)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x80f4), itsEventGroups, true);
            fireRpmAttributeChanged(std::dynamic_pointer_cast< ::v1::commonapi::SEAMEStub>(_stub)->getRpmAttribute(clientId));
        }

        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x3)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x80f5), itsEventGroups, true);
            fireSpdAttributeChanged(std::dynamic_pointer_cast< ::v1::commonapi::SEAMEStub>(_stub)->getSpdAttribute(clientId));
        }

        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x4)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x80f6), itsEventGroups, true);
            fireBatAttributeChanged(std::dynamic_pointer_cast< ::v1::commonapi::SEAMEStub>(_stub)->getBatAttribute(clientId));
        }

        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x5)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x80f7), itsEventGroups, true);
            fireDisAttributeChanged(std::dynamic_pointer_cast< ::v1::commonapi::SEAMEStub>(_stub)->getDisAttribute(clientId));
        }

    }

private:
};

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::commonapi::SEAMEStub,
    CommonAPI::Version
    > SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::getSEAMEInterfaceVersionStubDispatcher(&SEAMEStub::lockInterfaceVersionAttribute, &SEAMEStub::getInterfaceVersion, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::commonapi::SEAMEStub,
    uint8_t,
    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
> SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::getHumAttributeStubDispatcher(
    &SEAMEStub::lockHumAttribute,
    &SEAMEStub::getHumAttribute, false);
template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
    ::v1::commonapi::SEAMEStub,
    uint8_t,
    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
> SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::setHumAttributeStubDispatcher(
    &SEAMEStub::lockHumAttribute,
    &SEAMEStub::getHumAttribute,
    &SEAMEStubRemoteEvent::onRemoteSetHumAttribute,
    &SEAMEStubRemoteEvent::onRemoteHumAttributeChanged,
    &SEAMEStubAdapter::fireHumAttributeChanged,
    false
);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::commonapi::SEAMEStub,
    int8_t,
    CommonAPI::SomeIP::IntegerDeployment<int8_t>
> SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::getTmpAttributeStubDispatcher(
    &SEAMEStub::lockTmpAttribute,
    &SEAMEStub::getTmpAttribute, false);
template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
    ::v1::commonapi::SEAMEStub,
    int8_t,
    CommonAPI::SomeIP::IntegerDeployment<int8_t>
> SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::setTmpAttributeStubDispatcher(
    &SEAMEStub::lockTmpAttribute,
    &SEAMEStub::getTmpAttribute,
    &SEAMEStubRemoteEvent::onRemoteSetTmpAttribute,
    &SEAMEStubRemoteEvent::onRemoteTmpAttributeChanged,
    &SEAMEStubAdapter::fireTmpAttributeChanged,
    false
);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::commonapi::SEAMEStub,
    uint16_t,
    CommonAPI::SomeIP::IntegerDeployment<uint16_t>
> SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::getRpmAttributeStubDispatcher(
    &SEAMEStub::lockRpmAttribute,
    &SEAMEStub::getRpmAttribute, false);
template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
    ::v1::commonapi::SEAMEStub,
    uint16_t,
    CommonAPI::SomeIP::IntegerDeployment<uint16_t>
> SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::setRpmAttributeStubDispatcher(
    &SEAMEStub::lockRpmAttribute,
    &SEAMEStub::getRpmAttribute,
    &SEAMEStubRemoteEvent::onRemoteSetRpmAttribute,
    &SEAMEStubRemoteEvent::onRemoteRpmAttributeChanged,
    &SEAMEStubAdapter::fireRpmAttributeChanged,
    false
);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::commonapi::SEAMEStub,
    uint8_t,
    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
> SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::getSpdAttributeStubDispatcher(
    &SEAMEStub::lockSpdAttribute,
    &SEAMEStub::getSpdAttribute, false);
template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
    ::v1::commonapi::SEAMEStub,
    uint8_t,
    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
> SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::setSpdAttributeStubDispatcher(
    &SEAMEStub::lockSpdAttribute,
    &SEAMEStub::getSpdAttribute,
    &SEAMEStubRemoteEvent::onRemoteSetSpdAttribute,
    &SEAMEStubRemoteEvent::onRemoteSpdAttributeChanged,
    &SEAMEStubAdapter::fireSpdAttributeChanged,
    false
);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::commonapi::SEAMEStub,
    uint8_t,
    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
> SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::getBatAttributeStubDispatcher(
    &SEAMEStub::lockBatAttribute,
    &SEAMEStub::getBatAttribute, false);
template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
    ::v1::commonapi::SEAMEStub,
    uint8_t,
    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
> SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::setBatAttributeStubDispatcher(
    &SEAMEStub::lockBatAttribute,
    &SEAMEStub::getBatAttribute,
    &SEAMEStubRemoteEvent::onRemoteSetBatAttribute,
    &SEAMEStubRemoteEvent::onRemoteBatAttributeChanged,
    &SEAMEStubAdapter::fireBatAttributeChanged,
    false
);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::commonapi::SEAMEStub,
    uint8_t,
    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
> SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::getDisAttributeStubDispatcher(
    &SEAMEStub::lockDisAttribute,
    &SEAMEStub::getDisAttribute, false);
template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
    ::v1::commonapi::SEAMEStub,
    uint8_t,
    CommonAPI::SomeIP::IntegerDeployment<uint8_t>
> SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::setDisAttributeStubDispatcher(
    &SEAMEStub::lockDisAttribute,
    &SEAMEStub::getDisAttribute,
    &SEAMEStubRemoteEvent::onRemoteSetDisAttribute,
    &SEAMEStubRemoteEvent::onRemoteDisAttributeChanged,
    &SEAMEStubAdapter::fireDisAttributeChanged,
    false
);

template <typename _Stub, typename... _Stubs>
void SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::fireHumAttributeChanged(const uint8_t& value) {
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deployedValue(value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x80f2),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::fireTmpAttributeChanged(const int8_t& value) {
    CommonAPI::Deployable< int8_t, CommonAPI::SomeIP::IntegerDeployment<int8_t>> deployedValue(value, static_cast< CommonAPI::SomeIP::IntegerDeployment<int8_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int8_t,
                CommonAPI::SomeIP::IntegerDeployment<int8_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x80f3),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::fireRpmAttributeChanged(const uint16_t& value) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deployedValue(value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x80f4),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::fireSpdAttributeChanged(const uint8_t& value) {
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deployedValue(value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x80f5),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::fireBatAttributeChanged(const uint8_t& value) {
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deployedValue(value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x80f6),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>::fireDisAttributeChanged(const uint8_t& value) {
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deployedValue(value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x80f7),
        false,
        deployedValue
    );
}

template <typename _Stub = ::v1::commonapi::SEAMEStub, typename... _Stubs>
class SEAMESomeIPStubAdapter
    : public SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< SEAMESomeIPStubAdapter<_Stub, _Stubs...>> {
public:
    SEAMESomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          SEAMESomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace commonapi
} // namespace v1

#endif // V1_COMMONAPI_SEAME_SOMEIP_STUB_ADAPTER_HPP_
